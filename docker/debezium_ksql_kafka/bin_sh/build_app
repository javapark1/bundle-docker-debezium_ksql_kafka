#!/usr/bin/env bash
SCRIPT_DIR="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"
. $SCRIPT_DIR/.addonenv.sh

EXECUTABLE="`basename $0`"

if [ "$HELP" == "true" ]; then
cat <<EOF
NAME
   $EXECUTABLE - Build and prepare debezium_ksql_kafka environment

SYNOPSIS
   $EXECUTABLE [-?]

DESCRIPTION
   Build and prepare debezium_ksql_kafka environment by copying or downloading the geode
   jar files to the 'padogrid' directory which is mounted" by the Docker Geode connector
   container.

ENVIRONMENT VARIABLES
   GEODE_VERSION
             If GEODE_VERSION is set in the 'setenv.sh' file, then this script
             downloads the specified version of Geode. This variable should be
             set if your application does not require Geode locally installed.

DEFAULT
   ./$EXECUTABLE"
EOF
   exit
fi

pushd $APP_DIR > /dev/null

# Change Geode version number in cache-client.xml
VERSION_NUMBER="1.0"

sed -i${__SED_BACKUP} 's/cache-.*.xsd/cache-'${VERSION_NUMBER}'.xsd/' padogrid/etc/client-cache.xml

# Copy the geode and geode-addon jar files
if [ ! -d padogrid/lib ]; then
   mkdir -p padogrid/lib
fi
if [ ! -d padogrid/plugins ]; then
   mkdir -p padogrid/plugins
fi
if [ ! -d padogrid/log ]; then
   mkdir -p padogrid/log
fi
if [ ! -d padogrid/etc ]; then
   mkdir -p padogrid/etc
fi

# Clean binary dirs
rm padogrid/lib/*
rm padogrid/plugins/*

if [ "$GEODE_HOME" != "" ] && [ -d "$GEODE_HOME" ]; then
   cp $GEODE_HOME/lib/*.jar padogrid/lib/
else
   if [ "$GEODE_VERSION" != "" ]; then
      sed -i$__SED_BACKUP  -e "s/>.*<\/geode.version>/>$GEODE_VERSION<\/geode.version>/" pom-geode.xml
   fi
   mvn install -f pom-geode.xml
fi
cp $PADOGRID_HOME/lib/padogrid-common*.jar padogrid/lib/
cp $PADOGRID_HOME/geode/lib/geode-addon-core*.jar padogrid/lib/
# Test jars
cp $PADOGRID_HOME/geode/plugins/geode-addon-core*.jar padogrid/plugins/

popd > /dev/null

#
# Display build information
#
echo ""
echo "Workspace: $PADOGRID_WORKSPACE"
echo ""
echo "Build complete"
echo ""
